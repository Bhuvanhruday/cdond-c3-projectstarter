version: 2.1
# Use a package of configuration called an orb.

orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
  node: circleci/node@3.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            pwd
            cd /
            $dir            
            aws --version
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS = $(curl --insecure https://kvdb.io/Hqn9i49j52Ddgy2TDfd4Fg/migration_result)            
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            #Add revert code here. You can find this in the Getting Started section.
            npm run migration:revert            
            fi
            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
           cd frontend
           npm install
           npm run build           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run test for frontend
          command: |
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run test for backend
          command: |
             cd backend
             npm install
             npm run test  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:   
          name: scan backend dependency     
          command: |
             cd backend
             npm install            
             npm audit fix --audit-level=critical --force            
             npm audit --audit-level=critical
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:  
          name: scan frontend dependency          
          command: |
             cd frontend
             npm install            
             npm audit fix --audit-level=critical --force            
             npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run: 
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "http://$BACKEND_PUBLIC_IP:3030" >> .circleci/backend_public_url.txt
            echo "$BACKEND_PUBLIC_IP" >> .circleci/ansible/inventory.txt

            
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/backend_public_url.txt
      
      - destroy-environment
       

  configure-infrastructure:
    docker:
       - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["00:b4:59:a9:97:71:f5:16:06:7a:0f:50:e4:57:b5:97"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: .circleci/ansible
          command: |
            # install the dependencies needed for your playbook                             
            apk add --update ansible 
            ansible --version            
            pwd
            ls -lrt
      - run:
          name: check inventory file
          working_directory: .circleci/ansible
          command: |
            pwd  
            ls -lrt          
            cat inventory.txt       
      - run:
          name: Configure server          
          command: |                   
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      
      - destroy-environment
 
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations          
          command: |
            cd ~/project/backend
            npm install
            echo "install done"
            npm run build
            npm run migrations:revert
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            pwd 
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            # Your code here 
            cat  ~/project/backend/migrations_dump.txt   
            pwd       
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            echo "matched"
            curl --insecure https://kvdb.io/Hqn9i49j52Ddgy2TDfd4Fg/migration_result  -d '1'
            fi
      - destroy-environment  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum install -y tar gzip
            yum install -y unzip      
      - run:
          name: Install dependencies
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"            
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            npm install -g npm
            npm install oauth2
            npm install webpack
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: delete s3 bucket
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migration

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["00:b4:59:a9:97:71:f5:16:06:7a:0f:50:e4:57:b5:97"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd ~/project/.circleci/ansible
            apk add --update ansible tar gzip nodejs npm rsync openssh curl nodejs
            pip install awscli
      
      - run:
          name: Deploy backend
          command: |
              cd backend
              apk add --update nodejs-npm
              apk add --update npm
              npm install
              npm run build
              
      - run:
          name: Adding env vars
          command: |
              touch .env
              echo ENVIRONMENT=production >> "backend/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity{.ts,.js} >> "backend/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend//.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              
      - run:
          name: Configure server
          command: |    
              tar -C backend -czvf artifact.tar.gz .
              mkdir .circleci/ansible/roles/deploy/files
              mv artifact.tar.gz .circleci/ansible/roles/deploy/files
              cd .circleci/ansible
      - run:
          name: ansible
          command: |
            cd /root/project/.circleci/ansible             
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook deploy-backend.yml -i inventory.txt               
      - destroy-environment
      - revert-migration

workflows:
  # Name the workflow
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]      
      - scan-frontend:
          requires: [build-frontend]     
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
         requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      

        
    


